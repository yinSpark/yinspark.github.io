{"meta":{"title":"伊小宝","subtitle":"飞来山上千寻塔，闻说鸡鸣见日升。不畏浮云遮望眼，自缘身在最高层。","description":"带你踏上编程的旅途，脱胎换骨展翅高飞","author":"Bao Yin","url":"https://yinspark.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-05-20T22:16:08.000Z","updated":"2020-05-20T22:19:56.076Z","comments":true,"path":"categories/index.html","permalink":"https://yinspark.github.io/categories/index.html","excerpt":"","text":""},{"title":"history","date":"2020-05-22T12:46:04.000Z","updated":"2020-05-22T12:49:29.430Z","comments":false,"path":"history/index.html","permalink":"https://yinspark.github.io/history/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-20T22:16:45.000Z","updated":"2020-05-22T13:50:20.999Z","comments":false,"path":"about/index.html","permalink":"https://yinspark.github.io/about/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-05-22T13:10:08.000Z","updated":"2020-05-22T13:16:15.359Z","comments":true,"path":"guestbook/index.html","permalink":"https://yinspark.github.io/guestbook/index.html","excerpt":"","text":"欢迎大家给我留言，一起探讨问题"},{"title":"标签","date":"2020-05-20T22:15:10.000Z","updated":"2020-05-20T22:19:56.076Z","comments":true,"path":"tags/index.html","permalink":"https://yinspark.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python3常用模块--itertools","slug":"Python3常用模块-itertools","date":"2020-08-06T11:33:49.000Z","updated":"2020-08-06T11:33:49.000Z","comments":true,"path":"2020/08/06/Python3常用模块-itertools/","link":"","permalink":"https://yinspark.github.io/2020/08/06/Python3%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-itertools/","excerpt":"Python3常用模块–itertools","text":"Python3常用模块–itertools groupby(iterable, key=None)可将字符串连续相同字符分组，这对统计连续相同元素很有用 123from itertools import groupby[k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B[list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D product(*iterables, repeat=1)可将 2个及以上字符串的每个字符穷尽组合。例如： 12# product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy# product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111 参数 *iterables 表示可迭代对象解包后作为参数。下面是力扣网的一道题就需要利用product(), 参数需要 * 进行解包 12345678910111213class Solution: def letterCombinations(self, digits: str) -&gt; List[str]: # 大致解题思路 # from itertools import product # d = &#123;'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'&#125; # s = [d.get(i) for i in digits] # m = product(*s) # # print([''.join(i) for i in m]) # return [''.join(i) for i in m] # 组合后代码 return[] if digits==\"\" else [''.join(i) for i in product(*[&#123;'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'&#125;.get(i) for i in digits])]","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Python3 运算符","slug":"Python3运算符","date":"2020-08-05T11:00:05.000Z","updated":"2020-08-05T11:00:05.000Z","comments":true,"path":"2020/08/05/Python3运算符/","link":"","permalink":"https://yinspark.github.io/2020/08/05/Python3%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"Python3 运算符","text":"Python3 运算符 Python3 运算符Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 运算符优先级 Python 算术运算符以下假设变量a为10，变量b为21： 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 31 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -11 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 210 / 除 - x 除以 y b / a 输出结果 2.1 % 取模 - 返回除法的余数 b % a 输出结果 1 ** 幂 - 返回x的y次幂 a**b 为10的21次方 // 取整除 - 向下取接近商的整数 b // a 输出结果 2 以下实例演示了Python所有算术运算符的操作： 12345678910111213141516171819202122232425262728293031#!/usr/bin/python3 a = 21b = 10c = 0 c = a + bprint (\"1 - c 的值为：\", c) c = a - bprint (\"2 - c 的值为：\", c) c = a * bprint (\"3 - c 的值为：\", c) c = a / bprint (\"4 - c 的值为：\", c) c = a % bprint (\"5 - c 的值为：\", c) # 修改变量 a 、b 、ca = 2b = 3c = a**b print (\"6 - c 的值为：\", c) a = 10b = 5c = a//b print (\"7 - c 的值为：\", c) Python 比较运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y (a &lt; b) 返回 True。 &gt;= 大于等于 - 返回x是否大于等于y (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y (a &lt;= b) 返回 True。 以下实例演示了Python所有比较运算符的操作： 1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/python3 a = 21b = 10c = 0 if ( a == b ): print (\"1 - a 等于 b\")else: print (\"1 - a 不等于 b\") if ( a != b ): print (\"2 - a 不等于 b\")else: print (\"2 - a 等于 b\") if ( a &lt; b ): print (\"3 - a 小于 b\")else: print (\"3 - a 大于等于 b\") if ( a &gt; b ): print (\"4 - a 大于 b\")else: print (\"4 - a 小于等于 b\") # 修改变量 a 和 b 的值a = 5;b = 20;if ( a &lt;= b ): print (\"5 - a 小于等于 b\")else: print (\"5 - a 大于 b\") if ( b &gt;= a ): print (\"6 - b 大于等于 a\")else: print (\"6 - b 小于 a\") Python赋值运算符以下假设变量a为10，变量b为20： 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c *= a 等效于 c = c * a //= 取整除赋值运算符 c //= a 等效于 c = c // a := 海象运算符，可在表达式内部为变量赋值 在这个示例中，赋值表达式可以避免调用 len() 两次: 12if (n := len(a)) &gt; 10: print(f\"List is too long (&#123;n&#125; elements, expected &lt;= 10)\") 123456789101112131415161718192021222324252627#!/usr/bin/python3 a = 21b = 10c = 0 c = a + bprint (\"1 - c 的值为：\", c) c += aprint (\"2 - c 的值为：\", c) c *= aprint (\"3 - c 的值为：\", c) c /= a print (\"4 - c 的值为：\", c) c = 2c %= aprint (\"5 - c 的值为：\", c) c **= aprint (\"6 - c 的值为：\", c) c //= aprint (\"7 - c 的值为：\", c) Python 位运算符","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Python3 基本数据类型","slug":"Python3基本数据类型","date":"2020-08-05T07:27:50.000Z","updated":"2020-08-05T07:27:50.000Z","comments":true,"path":"2020/08/05/Python3基本数据类型/","link":"","permalink":"https://yinspark.github.io/2020/08/05/Python3%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"Python3 基本数据类型","text":"Python3 基本数据类型 Python3 基本数据类型Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。 等号（=）用来给变量赋值。 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如： 123456789#!/usr/bin/python3counter = 100 # 整型变量miles = 1000.0 # 浮点型变量name = \"runoob\" # 字符串print (counter)print (miles)print (name) 多个变量赋值Python允许你同时为多个变量赋值。例如： 1a = b = c = 1 以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。 您也可以为多个对象指定多个变量。例如： 1a, b, c = 1, 2, \"runoob\" 以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。 标准数据类型Python3 中有六个标准的数据类型： Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） Python3 的六个标准数据类型中： 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）； 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。 Number（数字）Python3 支持 int、float、bool、complex（复数）。 在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。 像大多数语言一样，数值类型的赋值和计算都是很直观的。 内置的 type() 函数可以用来查询变量所指的对象类型。 123&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; 此外还可以用 isinstance 来判断： 1234&gt;&gt;&gt; a = 111&gt;&gt;&gt; isinstance(a, int)True&gt;&gt;&gt; isinstance 和 type 的区别在于： type()不会认为子类是一种父类类型。 isinstance()会认为子类是一种父类类型。 1234567891011121314&gt;&gt;&gt; class A:... pass... &gt;&gt;&gt; class B(A):... pass... &gt;&gt;&gt; isinstance(A(), A)True&gt;&gt;&gt; type(A()) == A True&gt;&gt;&gt; isinstance(B(), A)True&gt;&gt;&gt; type(B()) == AFalse 注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。 当你指定一个值时，Number 对象就会被创建： 12var1 = 1var2 = 10 您也可以使用del语句删除一些对象引用。 del语句的语法是： 1del var1[,var2[,var3[....,varN]]] 您可以通过使用del语句删除单个或多个对象。例如： 12del vardel var_a, var_b 数值运算1234567891011121314&gt;&gt;&gt; 5 + 4 # 加法9&gt;&gt;&gt; 4.3 - 2 # 减法2.3&gt;&gt;&gt; 3 * 7 # 乘法21&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数0.5&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数0&gt;&gt;&gt; 17 % 3 # 取余2&gt;&gt;&gt; 2 ** 5 # 乘方32 注意： 1、Python可以同时为多个变量赋值，如a, b = 1, 2。 2、一个变量可以通过赋值指向不同类型的对象。 3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。 4、在混合计算时，Python会把整型转换成为浮点数。 数值类型实例 int float complex -786 -21.9 3e+26J 0x69 32.3e+18 9.322e-36j Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型 String（字符串）Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \\ 转义特殊字符。 字符串的截取的语法格式如下： 1变量[头下标:尾下标] 1234567891011#!/usr/bin/python3str = 'Runoob'print (str) # 输出字符串print (str[0:-1]) # 输出第一个到倒数第二个的所有字符print (str[0]) # 输出字符串第一个字符print (str[2:5]) # 输出从第三个开始到第五个的字符print (str[2:]) # 输出从第三个开始的后的所有字符print (str * 2) # 输出字符串两次，也可以写成 print (2 * str)print (str + \"TEST\") # 连接字符串 Python 使用反斜杠 \\ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串： 123456&gt;&gt;&gt; print('Ru\\noob')Ruoob&gt;&gt;&gt; print(r'Ru\\noob')Ru\\noob&gt;&gt;&gt; 另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 “””…””” 或者 ‘’’…’’’ 跨越多行。 注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。 12345&gt;&gt;&gt; word = 'Python'&gt;&gt;&gt; print(word[0], word[5])P n&gt;&gt;&gt; print(word[-1], word[-6])n P 与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。 注意： 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 2、字符串可以用+运算符连接在一起，用*运算符重复。 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 4、Python中的字符串不能改变。 List（列表）List（列表） 是 Python 中使用最频繁的数据类型。 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。 列表是写在方括号 [] 之间、用逗号分隔开的元素列表。 和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。 列表截取的语法格式如下： 1变量[头下标:尾下标] 索引值以 0 为开始值，-1 为从末尾的开始位置。加号 + 是列表连接运算符，星号 * 是重复操作。如下实例： 1234567891011#!/usr/bin/python3list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]tinylist = [123, 'runoob']print (list) # 输出完整列表print (list[0]) # 输出列表第一个元素print (list[1:3]) # 从第二个开始输出到第三个元素print (list[2:]) # 输出从第三个元素开始的所有元素print (tinylist * 2) # 输出两次列表print (list + tinylist) # 连接列表 与Python字符串不一样的是，列表中的元素是可以改变的： 12345678&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; a[0] = 9&gt;&gt;&gt; a[2:5] = [13, 14, 15]&gt;&gt;&gt; a[9, 2, 13, 14, 15, 6]&gt;&gt;&gt; a[2:5] = [] # 将对应的元素值设置为 []&gt;&gt;&gt; a[9, 2, 6] List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串： 如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串： 1234567891011121314151617181920212223def reverseWords(input): # 通过空格将字符串分隔符，把各个单词分隔为列表 inputWords = input.split(\" \") # 翻转字符串 # 假设列表 list = [1,2,3,4], # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样) # inputWords[-1::-1] 有三个参数 # 第一个参数 -1 表示最后一个元素 # 第二个参数为空，表示移动到列表末尾 # 第三个参数为步长，-1 表示逆向 inputWords=inputWords[-1::-1] # 重新组合字符串 output = ' '.join(inputWords) return output if __name__ == \"__main__\": input = 'I like runoob' rw = reverseWords(input) print(rw) Tuple（元组）元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。 元组中的元素类型也可以不相同： 1234567891011#!/usr/bin/python3tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2 )tinytuple = (123, 'runoob')print (tuple) # 输出完整元组print (tuple[0]) # 输出元组的第一个元素print (tuple[1:3]) # 输出从第二个元素开始到第三个元素print (tuple[2:]) # 输出从第三个元素开始的所有元素print (tinytuple * 2) # 输出两次元组print (tuple + tinytuple) # 连接元组 元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。 其实，可以把字符串看作一种特殊的元组。 12345678910&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)&gt;&gt;&gt; print(tup[0])1&gt;&gt;&gt; print(tup[1:5])(2, 3, 4, 5)&gt;&gt;&gt; tup[0] = 11 # 修改元组元素的操作是非法的Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignment&gt;&gt;&gt; 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则 12tup1 = () # 空元组tup2 = (20,) # 一个元素，需要在元素后添加逗号 string、list 和 tuple 都属于 sequence（序列）。 注意： 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 一般来说，函数的返回值一般为一个。而函数返回多个值的时候，是以元组的方式返回的。 123456&gt;&gt;&gt;def example(a,b):... return (a,b)...&gt;&gt;&gt;type(example(3,4))&lt;class 'tuple'&gt;&gt;&gt;&gt; python中的函数还可以接收可变长参数，比如以 “*” 开头的的参数名，会将所有的参数收集到一个元组上。 12345def test(*args): print(args) return argsprint(type(test(1,2,3,4))) #可以看见其函数的返回值是一个元组 Set（集合）集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。 基本功能是进行成员关系测试和删除重复元素。 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 创建格式： 123parame = &#123;value01,value02,...&#125;或者set(value) 1234567891011121314151617181920212223242526#!/usr/bin/python3sites = &#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'&#125;print(sites) # 输出集合，重复的元素被自动去掉# 成员测试if 'Runoob' in sites : print('Runoob 在集合中')else : print('Runoob 不在集合中')# set可以进行集合运算a = set('abracadabra')b = set('alacazam')print(a)print(a - b) # a 和 b 的差集print(a | b) # a 和 b 的并集print(a &amp; b) # a 和 b 的交集print(a ^ b) # a 和 b 中不同时存在的元素 Dictionary（字典）字典（dictionary）是Python中另一个非常有用的内置数据类型。 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。 键(key)必须使用不可变类型。 在同一个字典中，键(key)必须是唯一的。 1234567891011121314#!/usr/bin/python3dict = &#123;&#125;dict['one'] = \"1 - 菜鸟教程\"dict[2] = \"2 - 菜鸟工具\"tinydict = &#123;'name': 'runoob','code':1, 'site': 'www.runoob.com'&#125;print (dict['one']) # 输出键为 'one' 的值print (dict[2]) # 输出键为 2 的值print (tinydict) # 输出完整的字典print (tinydict.keys()) # 输出所有键print (tinydict.values()) # 输出所有值 构造函数 dict() 可以直接从键值对序列中构建字典如下： 1234567&gt;&gt;&gt; dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])&#123;'Runoob': 1, 'Google': 2, 'Taobao': 3&#125;&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;&#123;2: 4, 4: 16, 6: 36&#125;&gt;&gt;&gt; dict(Runoob=1, Google=2, Taobao=3)&#123;'Runoob': 1, 'Google': 2, 'Taobao': 3&#125;&gt;&gt;&gt; 另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用 { }。 python中的字典是使用了一个称为散列表（hashtable）的算法（不具体展开），其特点就是：不管字典中有多少项，in操作符花费的时间都差不多。如果把一个字典对象作为for的迭代对象，那么这个操作将会遍历字典的键： 123456def example(d): # d 是一个字典对象 for c in d: print(c) #如果调用函数试试的话，会发现函数会将d的所有键打印出来; #也就是遍历的是d的键，而不是值. 输入 dict 的键值对，可直接用 items() 函数： 123dict1 = &#123;'abc':1,\"cde\":2,\"d\":4,\"c\":567,\"d\":\"key1\"&#125;for k,v in dict1.items(): print(k,\":\",v) Python3 数据类型转换有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。 函数 描述 int(x [,base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Python3 命令行参数","slug":"Python3命令行参数","date":"2020-07-25T01:07:17.000Z","updated":"2020-07-25T01:07:17.000Z","comments":true,"path":"2020/07/25/Python3命令行参数/","link":"","permalink":"https://yinspark.github.io/2020/07/25/Python3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/","excerpt":"getopt模块","text":"getopt模块 Python3 命令行参数Python 提供了 getopt 模块来获取命令行参数。 1$ python test.py arg1 arg2 arg3 Python 中也可以所用 sys 的 sys.argv 来获取命令行参数： sys.argv 是命令行参数列表。 len(sys.argv) 是命令行参数个数。 注：sys.argv[0] 表示脚本名。 123456#!/usr/bin/python3import sysprint ('参数个数为:', len(sys.argv), '个参数。')print ('参数列表:', str(sys.argv)) getopt 模块getopt 模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是 sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。 该模块提供了两个方法及一个异常处理来解析命令行参数。 getopt.getopt 方法getopt.getopt 方法用于解析命令行参数列表，语法格式如下 1getopt.getopt(args, options[, long_options]) 方法参数说明： args: 要解析的命令行参数列表。 options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。 long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数。 该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表，包含那些没有’-‘或’–’的参数。 另外一个方法是 getopt.gnu_getopt，这里不多做介绍 Exception getopt.GetoptError在没有找到参数列表，或选项的需要的参数为空时会触发该异常。 异常的参数是一个字符串，表示错误的原因。属性 msg 和 opt 为相关选项的错误信息。实例假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下： 1usage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt; test.py 文件代码如下所示： 12345678910111213141516171819202122232425#!/usr/bin/python3import sys, getoptdef main(argv): inputfile = '' outputfile = '' try: opts, args = getopt.getopt(argv,\"hi:o:\",[\"ifile=\",\"ofile=\"]) except getopt.GetoptError: print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit(2) for opt, arg in opts: if opt == '-h': print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit() elif opt in (\"-i\", \"--ifile\"): inputfile = arg elif opt in (\"-o\", \"--ofile\"): outputfile = arg print ('输入的文件为：', inputfile) print ('输出的文件为：', outputfile)if __name__ == \"__main__\": main(sys.argv[1:])","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Python3 最基础使用","slug":"Python3最基础使用","date":"2020-07-24T01:07:17.000Z","updated":"2020-07-24T01:07:17.000Z","comments":true,"path":"2020/07/24/Python3最基础使用/","link":"","permalink":"https://yinspark.github.io/2020/07/24/Python3%E6%9C%80%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","excerpt":"Python3 最基础使用","text":"Python3 最基础使用 查看Python3 版本python -V python3 --version Python3 交互式编程1python Python3 脚本式编程1python hello.py 若无法执行，需修改权限： 1$ chmod +x hello.py Python3 基础语法编码默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码： # -*- coding: utf-8 -*- 上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。 标识符 第一个字符必须是字母表中字母或下划线 _ 。 标识符的其他的部分由字母、数字和下划线组成。 标识符对大小写敏感。在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。 python保留字保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字： 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释Python中单行注释以 # 开头，实例如下： 1234#!/usr/bin/python3 # 第一个注释print (\"Hello, Python!\") # 第二个注释 多行注释可以用多个 # 号，还有 ‘’’ 和 “””： 123456789101112131415#!/usr/bin/python3 # 第一个注释# 第二个注释 '''第三注释第四注释''' \"\"\"第五注释第六注释\"\"\"print (\"Hello, Python!\") 以下实例我们可以输出函数的注释： 1234def a(): '''这是文档字符串''' passprint(a.__doc__) 行与缩进python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下： 1234if True: print (\"True\")else: print (\"False\") 多行语句Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如： 123total = item_one + \\ item_two + \\ item_three 在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如： 12total = ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] 数字(Number)类型python中数字有四种类型：整数、布尔型、浮点数和复数。 int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。 bool (布尔), 如 True。 float (浮点数), 如 1.23、3E-2 complex (复数), 如 1 + 2j、 1.1 + 2.2j 字符串(String) python中单引号和双引号使用完全相同。 使用三引号(‘’’或”””)可以指定一个多行字符串。 转义符 ‘&#39; 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \\n” \\n会显示，并不是换行。 按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。 字符串可以用 + 运算符连接在一起，用 * 运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python中的字符串不能改变。 Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串的截取的语法格式如下：变量[头下标:尾下标:步长] 当字符串内容为浮点型要转换为整型时，无法直接用 int() 转换：需要把字符串先转化成 float 型再转换成 int 型 1234word = '字符串'sentence = \"这是一个句子。\"paragraph = \"\"\"这是一个段落，可以由多行组成\"\"\" 12345678910111213141516#!/usr/bin/python3 str='Runoob' print(str) # 输出字符串print(str[0:-1]) # 输出第一个到倒数第二个的所有字符print(str[0]) # 输出字符串第一个字符print(str[2:5]) # 输出从第三个开始到第五个的字符print(str[2:]) # 输出从第三个开始后的所有字符print(str * 2) # 输出字符串两次print(str + '你好') # 连接字符串 print('------------------------------') print('hello\\nrunoob') # 使用反斜杠(\\)+n转义特殊字符print(r'hello\\nrunoob') # 在字符串前面添加一个 r，表示原始字符串，不会发生转义 这里的 r 指 raw，即 raw string。 三个双引号赋值给字符串变量时，表示一种字符串的特殊写法。 123456789&gt;&gt;&gt; str=\"\"\"I... want... you\"\"\"&gt;&gt;&gt; str'I\\nwant\\nyou'&gt;&gt;&gt; print(str)Iwantyou 空行函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。 空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。 记住：空行也是程序代码的一部分 等待用户输入执行下面的程序在按回车键后就会等待用户输入：执行下面的程序在按回车键后就会等待用户输入： 123#!/usr/bin/python3 input(\"\\n\\n按下 enter 键后退出。\") 以上代码中 ，”\\n\\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例： 123#!/usr/bin/python3 import sys; x = 'runoob'; sys.stdout.write(x + '\\n') 使用交互式命令行执行，输出结果为：使用交互式命令行执行，输出结果为： 123&gt;&gt;&gt; import sys; x = 'runoob'; sys.stdout.write(x + '\\n')runoob7 此处的 7 表示字符数。 多个语句构成代码组缩进相同的一组语句构成一个代码块，我们称之代码组。 像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。 我们将首行及后面的代码组称为一个子句(clause)。 如下实例： 123456if expression : suiteelif expression : suite else : suite Print 输出print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””： 12345678910111213#!/usr/bin/python3 x=\"a\"y=\"b\"# 换行输出print( x )print( y ) print('---------')# 不换行输出print( x, end=\" \" )print( y, end=\" \" )print() import 与 from…import在 python 用 import 或者 from…import 来导入相应的模块。 将整个模块(somemodule)导入，格式为： import somemodule 从某个模块中导入某个函数,格式为： from somemodule import somefunction 从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc 将某个模块中的全部函数导入，格式为： from somemodule import * 将模块换个别名，例如：import time as abc，在引用时格式为：abc.sleep(1)。 123456import sysprint('================Python import mode==========================')print ('命令行参数为:')for i in sys.argv: print (i)print ('\\n python 路径为',sys.path) 1234from sys import argv,path # 导入特定的成员 print('================python from import===================================')print('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path 命令行参数很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息： 123456789$ python -husage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...Options and arguments (and corresponding environment variables):-c cmd : program passed in as string (terminates option list)-d : debug output from parser (also PYTHONDEBUG=x)-E : ignore environment variables (such as PYTHONPATH)-h : print this help message and exit[ etc. ] 第一行注释第一行注释标的是指向 python 的路径，告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器。在 Windows 下可以不写第一行注释: 1#!/usr/bin/python3 1#!/usr/bin/env python3 help() 函数调用 python 的 help() 函数可以打印输出一个函数的文档字符串： 123# 如下实例，查看 max 内置函数的参数列表和规范的文档&gt;&gt;&gt; help(max)……显示帮助信息…… 如果仅仅想得到文档字符串： 1&gt;&gt;&gt; print(max.__doc__) # 注意，doc的前后分别是两个下划线 要善用 help() 方法通过命令 help(“print”) 我们知道这个方法里第三个为缺省参数 sep=’ ‘。 1&gt;&gt;&gt; help(\"print\") “Windows 命令行窗口”下清屏第一种方法，在命令行窗口输入： 12&gt;&gt;&gt; import os&gt;&gt;&gt; i=os.system(\"cls\") 第二种方法，在命令行窗口输入： 12&gt;&gt;&gt; import subprocess&gt;&gt;&gt; i=subprocess.call(\"cls\", shell=True)","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"windows 下安装 Python 虚拟环境","slug":"windows下安装Python虚拟环境","date":"2020-06-24T01:07:17.000Z","updated":"2020-06-24T01:07:17.000Z","comments":true,"path":"2020/06/24/windows下安装Python虚拟环境/","link":"","permalink":"https://yinspark.github.io/2020/06/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","excerpt":"主要介绍如何 在 Windows 下使用 virtualenv 创建 Python3 虚拟环境，存储新建虚拟环境是在自定义的环境变量目录下。","text":"主要介绍如何 在 Windows 下使用 virtualenv 创建 Python3 虚拟环境，存储新建虚拟环境是在自定义的环境变量目录下。 1、安装 virtualenvwrapper安装命令，windows 系统,在非 scripts 目录下运行 12pip install virtualenvwrapper-win （安装）pip uninstall virtualenvwrapper (卸载) 2、配置虚拟环境安装路径系统变量已有默认指定环境变量，修改为你想要存储新建的虚拟环境的位置 1WORKON_HOME='D:\\myinstall\\python\\pythonenv' 3、虚拟环境操作创建虚拟环境，会自动切换到创建好的虚拟环境 1mkvirtualenv virtualenv_name 切换到某个虚拟环境 1workon other_virtualenv_name 退出当前虚拟环境 1deactivate 删除某个虚拟环境 1rmvirtualenv virtualenv_name 列出所有虚拟环境 1lsvirtualenv 切换到虚拟环境的目录 1cdvirtualenv 创建虚拟环境的时候指定python版本在使用 mkvirtualenv 的时候，可以指定 --python 的参数来指定具体的 python 路径 1mkvirtualenv --python==C:\\python37\\python.exe virtualenv_name 列出当前虚拟环境下所有 pip 安装的依赖包 1pip list 4、检查 wrapper 下的目录文件1workon 5、在虚拟环境下安装工具包1pip install -i https://pypi.douban.com/simple scrapy (使用豆瓣源)","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Volantis 主题下优化博客","slug":"Volantis主题下优化博客","date":"2020-05-24T06:20:51.000Z","updated":"2020-05-24T06:20:51.000Z","comments":true,"path":"2020/05/24/Volantis主题下优化博客/","link":"","permalink":"https://yinspark.github.io/2020/05/24/Volantis%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/","excerpt":"CDN 加速、主页文章只显示摘要","text":"CDN 加速、主页文章只显示摘要 一、免费 CDN 搭建jsDelivr + Github 是免费且好用的CDN。使用方法：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径例如： https://cdn.jsdelivr.net/gh/yinSpark/yinspark.github.io@master/favicon.ico https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4 二、优化博客主页文章摘要在文章中插入 ，前面的部分即为摘要。 某篇文章源码 12345678910---title: xxxdate: 2020-02-21---这是摘要&lt;!-- more --&gt;这是正文 1注意： &lt;!-- more --&gt; 前后一定要有空行，不然可能导致显示错位。","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://yinspark.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"集成开发","slug":"集成开发","permalink":"https://yinspark.github.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/"}]},{"title":"如何使用 reveal.js 制作 PPT","slug":"如何使用reveal-js制作PPT","date":"2020-05-22T11:08:23.000Z","updated":"2020-05-22T11:08:23.000Z","comments":true,"path":"2020/05/22/如何使用reveal-js制作PPT/","link":"","permalink":"https://yinspark.github.io/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reveal-js%E5%88%B6%E4%BD%9CPPT/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://yinspark.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"集成开发","slug":"集成开发","permalink":"https://yinspark.github.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/"}]},{"title":"如何使用 docsify 动态生成文档网站","slug":"如何使用docsify动态生成文档网站","date":"2020-05-22T10:57:42.000Z","updated":"2020-05-22T10:57:42.000Z","comments":true,"path":"2020/05/22/如何使用docsify动态生成文档网站/","link":"","permalink":"https://yinspark.github.io/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docsify%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://yinspark.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"集成开发","slug":"集成开发","permalink":"https://yinspark.github.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/"}]},{"title":"如何使用 hexo 搭建个人博客","slug":"如何使用hexo搭建个人博客","date":"2020-05-22T10:52:09.000Z","updated":"2020-05-22T10:52:09.000Z","comments":true,"path":"2020/05/22/如何使用hexo搭建个人博客/","link":"","permalink":"https://yinspark.github.io/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"本篇主要介绍如何搭建 Hexo 个人博客写作系统，如何发布到 GitHub Pages 上，以及如何绑定自己的域名。另外就是如何使用 NexT 主题，最后关于如何进行写作。","text":"本篇主要介绍如何搭建 Hexo 个人博客写作系统，如何发布到 GitHub Pages 上，以及如何绑定自己的域名。另外就是如何使用 NexT 主题，最后关于如何进行写作。 一、搭建本地写作环境1.1 环境配置使用 Hexo 必需先安装 Node.js 和 Git。安装 Hexo，命令第一步：使用 cnpm，安装淘宝镜像源sudo npm install -g cnpm --registry=https://registry.npm.taobao.org第二步：安装hexo脚本架sudo cnpm install hexo-cli -g 1.2 创建项目创建并初始化博客项目，切换目录，安装依赖 123hexo init myblogcd myblogcnpm install 1.3 本地预览 生成静态网站hexo generate 或简化的 hexo g 查看目录结构tree -L 1 启动服务，本地预览hexo server 或简化的 hexo s测试链接 http://localhost:4000/ 1.4 新建文章测试如何写一篇文章 123hexo new testhexo ghexo s 测试链接 http://localhost:4000/ 二、创建 GitHub Pages第一步：打开https://github.com/new/，输入名字(你将来博客网址)，创建仓库。第二步：修改_config.xml 1234deploy: type: git repo: https://github.com/yinSpark/yinspark.github.io.git branch: master 第三步：执行部署命令可能需要安装一个插件，先安装再部署 12cnpm install hexo-deployer-git --savehexo d 若有需要，最好先清除缓存，然后部署 123hexo cleanhexo ghexo deploy 简化为 hexo d 打开 https://yinspark.github.io/，这里是你自己GitHub Pages 名字 三、绑定自己的域名3.1 添加域名解析操作步骤一： 12登录阿里云 --&gt; [控制台] --&gt; [域名] --&gt; [域名列表]--&gt; [你的域名] --&gt; [域名解析] 操作步骤二：添加两条解析记录第一条：记录值：[通过 ping xx.github.io 获得的ip]，其它默认就行第二条：记录类型：CNAME, 主机记录： www, 记录值：[你的 GitHub Pages 地址]，其它默认就行为了保险起见，我加了第三条，其实和第二条一样第三条：记录值：[通过 ping yinspark.github.io 获得的ip]，其它默认就行 3.2 绑定独立域名操作步骤如下 123456cd myblog/sourcetouch CNAME写入自己的域名，我的域名 www.yinspark.xyzcd ..hexo ghexo d 这样就可以使用自己的域名 http:www.yinspark.xyz 访问了 四、使用 NexT 主题我下面介绍个 Hexo 主题的使用方法，我自己用的 Volantis。 4.1 安装主题安装步骤 123456789101112git clone https://github.com/theme-next/hexo-theme-next.gitcd themes/hexo-theme-nextgit tag -lgit checkout tags/v7.8.0# 修改_config.xmltheme: hexo-theme-next# 本地预览hexo cleanhexo g --debughexo s --debug# 部署到GitHub上hexo d 4.2 主题配置不过多介绍，参考文档使用 4.3 新建页面 新增导航栏页面 123修改 themes/hexo-theme-next/_config.ymlmenu:和themes/hexo-theme-next/languages/zh-CN.yml 新建分类、标签、关于页面 123hexo new page tagshexo new page categorieshexo new page about 页面设置 1234567---title: testdate: 2020-05-21 02:02:23tags:# type: \"tags\" # 指定页面类型# comments: false # 禁用评论--- 五、开始写作5.1 创建文章并熟悉布局 新建一篇文章 1hexo new 第1篇文章 想要文件名带上创建日期 12修改全局配置 new_post_name: :year-:month-:day-:title.mdhexo new 第2篇文章 布局 文章 页面 草稿 新建一篇草稿 12hexo new draft 第1篇草稿hexo publish _drafts 第1篇草稿 5.2 使用写作模板查看有哪些模板 12tree scaffolds/ # Windows下失灵可使用 tree /F scaffolds 查看默认文章模板 1cat scaffolds/post.md 修改模板post.md 123456789101112---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;tags:- 标签 1- 标签 2categories: - 分类 1- 分类 2comments: true--- 指定模板新建文章 1hexo new [模板名] &lt;文章名&gt;","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://yinspark.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"集成开发","slug":"集成开发","permalink":"https://yinspark.github.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/"}]},{"title":"NodeJS 使用过程遇到的坑总结","slug":"NodeJS使用过程遇到的坑总结","date":"2020-05-22T10:46:29.000Z","updated":"2020-05-22T10:46:29.000Z","comments":true,"path":"2020/05/22/NodeJS使用过程遇到的坑总结/","link":"","permalink":"https://yinspark.github.io/2020/05/22/NodeJS%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://yinspark.github.io/tags/NodeJS/"}]},{"title":"NodeJS 常用的第三方库","slug":"NodeJS常用的第三方库","date":"2020-05-22T10:44:56.000Z","updated":"2020-05-22T10:44:56.000Z","comments":true,"path":"2020/05/22/NodeJS常用的第三方库/","link":"","permalink":"https://yinspark.github.io/2020/05/22/NodeJS%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://yinspark.github.io/tags/NodeJS/"}]},{"title":"Python3 使用过程遇到的坑总结","slug":"Python3使用过程遇到的坑总结","date":"2020-05-22T10:42:07.000Z","updated":"2020-05-22T10:42:07.000Z","comments":true,"path":"2020/05/22/Python3使用过程遇到的坑总结/","link":"","permalink":"https://yinspark.github.io/2020/05/22/Python3%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Python3 常用的第三方库","slug":"Python3常用的第三方库","date":"2020-05-22T10:41:00.000Z","updated":"2020-05-22T10:41:00.000Z","comments":true,"path":"2020/05/22/Python3常用的第三方库/","link":"","permalink":"https://yinspark.github.io/2020/05/22/Python3%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"}]},{"title":"Markdown 基础语法和扩展语法GFM","slug":"Markdown基础语法和扩展语法GFM","date":"2020-05-22T10:34:33.000Z","updated":"2020-05-22T10:34:33.000Z","comments":true,"path":"2020/05/22/Markdown基础语法和扩展语法GFM/","link":"","permalink":"https://yinspark.github.io/2020/05/22/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Markdown","slug":"Markdown","permalink":"https://yinspark.github.io/tags/Markdown/"}]},{"title":"VS Code 如何配置和操作使用","slug":"VSCode如何配置和操作使用","date":"2020-05-22T10:31:26.000Z","updated":"2020-05-22T10:31:26.000Z","comments":true,"path":"2020/05/22/VSCode如何配置和操作使用/","link":"","permalink":"https://yinspark.github.io/2020/05/22/VSCode%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"基础操作","slug":"基础操作","permalink":"https://yinspark.github.io/tags/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"name":"软件的使用","slug":"软件的使用","permalink":"https://yinspark.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"}]},{"title":"Linux 常用快捷键和命令","slug":"Linux常用快捷键和命令","date":"2020-05-22T10:25:15.000Z","updated":"2020-05-22T10:25:15.000Z","comments":true,"path":"2020/05/22/Linux常用快捷键和命令/","link":"","permalink":"https://yinspark.github.io/2020/05/22/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://yinspark.github.io/tags/Linux/"},{"name":"基础操作","slug":"基础操作","permalink":"https://yinspark.github.io/tags/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"}]},{"title":"Windows 常用快捷键和命令","slug":"Windows常用快捷键和命令","date":"2020-05-22T10:04:39.000Z","updated":"2020-05-22T10:04:39.000Z","comments":true,"path":"2020/05/22/Windows常用快捷键和命令/","link":"","permalink":"https://yinspark.github.io/2020/05/22/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/","excerpt":"常用快捷键、命令行操作","text":"常用快捷键、命令行操作 常用快捷键常用命令 chcp 命令chcp 65001：改变终端编码为 UTF-8 cls 命令cls：清屏","categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"基础操作","slug":"基础操作","permalink":"https://yinspark.github.io/tags/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"name":"Windows","slug":"Windows","permalink":"https://yinspark.github.io/tags/Windows/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-20T17:34:47.693Z","updated":"2020-05-20T17:34:47.693Z","comments":true,"path":"2020/05/21/hello-world/","link":"","permalink":"https://yinspark.github.io/2020/05/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"编程技术","slug":"编程技术","permalink":"https://yinspark.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"语言学习","slug":"语言学习","permalink":"https://yinspark.github.io/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python3","slug":"Python3","permalink":"https://yinspark.github.io/tags/Python3/"},{"name":"前端","slug":"前端","permalink":"https://yinspark.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"集成开发","slug":"集成开发","permalink":"https://yinspark.github.io/tags/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://yinspark.github.io/tags/NodeJS/"},{"name":"Markdown","slug":"Markdown","permalink":"https://yinspark.github.io/tags/Markdown/"},{"name":"基础操作","slug":"基础操作","permalink":"https://yinspark.github.io/tags/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"name":"软件的使用","slug":"软件的使用","permalink":"https://yinspark.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"name":"Linux","slug":"Linux","permalink":"https://yinspark.github.io/tags/Linux/"},{"name":"Windows","slug":"Windows","permalink":"https://yinspark.github.io/tags/Windows/"}]}