<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python3常用模块--itertools</title>
      <link href="/2020/08/06/Python3%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-itertools/"/>
      <url>/2020/08/06/Python3%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-itertools/</url>
      
        <content type="html"><![CDATA[<p>Python3常用模块–itertools</p><a id="more"></a><h3 id="groupby-iterable-key-None"><a href="#groupby-iterable-key-None" class="headerlink" title="groupby(iterable, key=None)"></a>groupby(iterable, key=None)</h3><p>可将字符串连续相同字符分组，这对统计连续相同元素很有用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">[k <span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(<span class="string">'AAAABBBCCDAABBB'</span>)] <span class="comment">--&gt; A B C D A B</span></span><br><span class="line">[list(g) <span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(<span class="string">'AAAABBBCCD'</span>)] <span class="comment">--&gt; AAAA BBB CC D</span></span><br></pre></td></tr></table></figure><h3 id="product-iterables-repeat-1"><a href="#product-iterables-repeat-1" class="headerlink" title="product(*iterables, repeat=1)"></a>product(*iterables, repeat=1)</h3><p>可将 2个及以上字符串的每个字符穷尽组合。例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># product(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>) --&gt; Ax Ay Bx By Cx Cy Dx Dy</span><br><span class="line"># product(range(<span class="number">2</span>), repeat=<span class="number">3</span>) --&gt; <span class="number">000</span> <span class="number">001</span> <span class="number">010</span> <span class="number">011</span> <span class="number">100</span> <span class="number">101</span> <span class="number">110</span> <span class="number">111</span></span><br></pre></td></tr></table></figure><p>参数 *iterables 表示可迭代对象解包后作为参数。下面是力扣网的一道题就需要利用<br>product(), 参数需要 * 进行解包</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution:</span><br><span class="line">    def letterCombinations(self, digits: str) -&gt; List[str]:</span><br><span class="line"></span><br><span class="line">        # 大致解题思路</span><br><span class="line">        # <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">        # d = &#123;<span class="string">'2'</span>: <span class="string">'abc'</span>, <span class="string">'3'</span>: <span class="string">'def'</span>, <span class="string">'4'</span>: <span class="string">'ghi'</span>, <span class="string">'5'</span>: <span class="string">'jkl'</span>, <span class="string">'6'</span>: <span class="string">'mno'</span>, <span class="string">'7'</span>: <span class="string">'pqrs'</span>, <span class="string">'8'</span>: <span class="string">'tuv'</span>, <span class="string">'9'</span>: <span class="string">'wxyz'</span>&#125;</span><br><span class="line">        # s = [d.get(i) for i <span class="keyword">in</span> digits]</span><br><span class="line">        # m = product(*s)</span><br><span class="line">        # # print([<span class="string">''</span>.join(i) for i <span class="keyword">in</span> m])</span><br><span class="line">        # return [<span class="string">''</span>.join(i) for i <span class="keyword">in</span> m]</span><br><span class="line"></span><br><span class="line">        # 组合后代码</span><br><span class="line">        return[] <span class="keyword">if</span> digits==<span class="string">""</span> else [<span class="string">''</span>.join(i) for i <span class="keyword">in</span> product(*[&#123;<span class="string">'2'</span>: <span class="string">'abc'</span>, <span class="string">'3'</span>: <span class="string">'def'</span>, <span class="string">'4'</span>: <span class="string">'ghi'</span>, <span class="string">'5'</span>: <span class="string">'jkl'</span>, <span class="string">'6'</span>: <span class="string">'mno'</span>, <span class="string">'7'</span>: <span class="string">'pqrs'</span>, <span class="string">'8'</span>: <span class="string">'tuv'</span>, <span class="string">'9'</span>: <span class="string">'wxyz'</span>&#125;.get(i) for i <span class="keyword">in</span> digits])]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 运算符</title>
      <link href="/2020/08/05/Python3%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/08/05/Python3%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>Python3 运算符</p><a id="more"></a><h2 id="Python3-运算符"><a href="#Python3-运算符" class="headerlink" title="Python3 运算符"></a>Python3 运算符</h2><p>Python语言支持以下类型的运算符:</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ul><h3 id="Python-算术运算符"><a href="#Python-算术运算符" class="headerlink" title="Python 算术运算符"></a>Python 算术运算符</h3><p>以下假设变量a为10，变量b为21：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">/</td><td align="left">除 - x 除以 y</td><td align="left">b / a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">//</td><td align="left">取整除 - 向下取接近商的整数</td><td align="left">b // a 输出结果 2</td></tr></tbody></table><p>以下实例演示了Python所有算术运算符的操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">c</span> = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"1 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a - b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"2 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a * b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"3 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a / b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"4 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a % b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"5 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 、b 、<span class="built_in">c</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">c</span> = a**b </span><br><span class="line"><span class="built_in">print</span> (<span class="string">"6 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">c</span> = a<span class="comment">//b </span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"7 - c 的值为："</span>, <span class="built_in">c</span>)</span><br></pre></td></tr></table></figure><h3 id="Python-比较运算符"><a href="#Python-比较运算符" class="headerlink" title="Python 比较运算符"></a>Python 比较运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 True。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y</td><td align="left">(a &lt; b) 返回 True。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于 - 返回x是否大于等于y</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 - 返回x是否小于等于y</td><td align="left">(a &lt;= b) 返回 True。</td></tr></tbody></table><p>以下实例演示了Python所有比较运算符的操作：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">a = 21</span><br><span class="line">b = 10</span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a == b ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"1 - a 等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"1 - a 不等于 b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a != b ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"2 - a 不等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"2 - a 等于 b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a &lt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"3 - a 小于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"3 - a 大于等于 b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"4 - a 大于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"4 - a 小于等于 b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 和 b 的值</span></span><br><span class="line">a = 5;</span><br><span class="line">b = 20;</span><br><span class="line"><span class="keyword">if</span> ( a &lt;= b ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"5 - a 小于等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"5 - a 大于  b"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( b &gt;= a ):</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"6 - b 大于等于 a"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">"6 - b 小于 a"</span>)</span><br></pre></td></tr></table></figure><h3 id="Python赋值运算符"><a href="#Python赋值运算符" class="headerlink" title="Python赋值运算符"></a>Python赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr><tr><td align="left">:=</td><td align="left">海象运算符，可在表达式内部为变量赋值</td><td align="left">在这个示例中，赋值表达式可以避免调用 len() 两次:</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">"List is too long (&#123;n&#125; elements, expected &lt;= 10)"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">c</span> = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"1 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> += a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"2 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> *= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"3 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> /= a </span><br><span class="line"><span class="built_in">print</span> (<span class="string">"4 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> = <span class="number">2</span></span><br><span class="line"><span class="built_in">c</span> %= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"5 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> **= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"6 - c 的值为："</span>, <span class="built_in">c</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">c</span> <span class="comment">//= a</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">"7 - c 的值为："</span>, <span class="built_in">c</span>)</span><br></pre></td></tr></table></figure><h3 id="Python-位运算符"><a href="#Python-位运算符" class="headerlink" title="Python 位运算符"></a>Python 位运算符</h3>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基本数据类型</title>
      <link href="/2020/08/05/Python3%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/08/05/Python3%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python3 基本数据类型</p><a id="more"></a><h2 id="Python3-基本数据类型"><a href="#Python3-基本数据类型" class="headerlink" title="Python3 基本数据类型"></a>Python3 基本数据类型</h2><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">counter = <span class="number">100</span>          <span class="meta"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="meta"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">"runoob"</span>     <span class="meta"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (counter)</span><br><span class="line"><span class="keyword">print</span> (miles)</span><br><span class="line"><span class="keyword">print</span> (name)</span><br></pre></td></tr></table></figure><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><p>Python允许你同时为多个变量赋值。例如：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = <span class="attr">b</span> = <span class="attr">c</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p><p>您也可以为多个对象指定多个变量。例如：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"runoob"</span></span><br></pre></td></tr></table></figure><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h4 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h4><p>Python3 支持 int、float、bool、complex（复数）。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="type">True</span>, <span class="number">4</span>+<span class="number">3</span>j</span><br><span class="line">&gt;&gt;&gt; print(<span class="class"><span class="keyword">type</span>(<span class="title">a</span>), <span class="keyword">type</span>(<span class="title">b</span>), <span class="keyword">type</span>(<span class="title">c</span>), <span class="keyword">type</span>(<span class="title">d</span>))</span></span><br><span class="line">&lt;<span class="keyword">class</span> 'int'&gt; &lt;<span class="keyword">class</span> 'float'&gt; &lt;<span class="keyword">class</span> 'bool'&gt; &lt;<span class="keyword">class</span> 'complex'&gt;</span><br></pre></td></tr></table></figure><p>此外还可以用 isinstance 来判断：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; isinstance(a, int)</span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(A(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(A()) == A </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(B(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p><p>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">var2</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1<span class="comment">[,var2<span class="comment">[,var3<span class="comment">[....,varN]</span>]</span>]</span></span><br></pre></td></tr></table></figure><p>您可以通过使用del语句删除单个或多个对象。例如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">var</span></span><br><span class="line"><span class="built_in">del</span> var_a, var_b</span><br></pre></td></tr></table></figure><h4 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">5</span> <span class="string">+</span> <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">4.3</span> <span class="bullet">-</span> <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">3</span> <span class="string">*</span> <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">2</span> <span class="string">/</span> <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">2</span> <span class="string">//</span> <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">17</span> <span class="string">%</span> <span class="number">3</span> <span class="comment"># 取余</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">2</span> <span class="string">**</span> <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><h4 id="数值类型实例"><a href="#数值类型实例" class="headerlink" title="数值类型实例"></a>数值类型实例</h4><table><thead><tr><th align="left">int</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">-786</td><td align="left">-21.9</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">32.3e+18</td><td align="left">9.322e-36j</td></tr></tbody></table><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型</p><h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量<span class="selector-attr">[头下标:尾下标]</span></span><br></pre></td></tr></table></figure><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">str</span> = <span class="string">'Runoob'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span>)          <span class="meta"># 输出字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span>[<span class="number">0</span>:<span class="number">-1</span>])    <span class="meta"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span>[<span class="number">0</span>])       <span class="meta"># 输出字符串第一个字符</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span>[<span class="number">2</span>:<span class="number">5</span>])     <span class="meta"># 输出从第三个开始到第五个的字符</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span>[<span class="number">2</span>:])      <span class="meta"># 输出从第三个开始的后的所有字符</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span> * <span class="number">2</span>)      <span class="meta"># 输出字符串两次，也可以写成 print (<span class="number">2</span> * str)</span></span><br><span class="line"><span class="keyword">print</span> (<span class="keyword">str</span> + <span class="string">"TEST"</span>) <span class="meta"># 连接字符串</span></span><br></pre></td></tr></table></figure><p>Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Ru\noob'</span>)</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'Ru\noob'</span>)</span><br><span class="line">Ru\noob</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 “””…””” 或者 ‘’’…’’’ 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; word = <span class="string">'Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(word[<span class="number">0</span>], word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(word[-<span class="number">1</span>], word[-<span class="number">6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</p><p>注意：</p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量<span class="selector-attr">[头下标:尾下标]</span></span><br></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。<br>加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span> = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'runoob'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="keyword">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="keyword">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="keyword">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="keyword">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="keyword">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">&gt;&gt;&gt; a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line">&gt;&gt;&gt; a[<span class="number">2</span>:<span class="number">5</span>] = []   # 将对应的元素值设置为 []</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。</p><p>注意：</p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def reverseWords(input):</span><br><span class="line">     </span><br><span class="line">    # 通过空格将字符串分隔符，把各个单词分隔为列表</span><br><span class="line">    inputWords = input.split(<span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line">    # 翻转字符串</span><br><span class="line">    # 假设列表 list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],  </span><br><span class="line">    # list[<span class="number">0</span>]=<span class="number">1</span>, list[<span class="number">1</span>]=<span class="number">2</span> ，而 <span class="number">-1</span> 表示最后一个元素 list[<span class="number">-1</span>]=<span class="number">4</span> ( 与 list[<span class="number">3</span>]=<span class="number">4</span> 一样)</span><br><span class="line">    # inputWords[<span class="number">-1</span>::<span class="number">-1</span>] 有三个参数</span><br><span class="line">    # 第一个参数 <span class="number">-1</span> 表示最后一个元素</span><br><span class="line">    # 第二个参数为空，表示移动到列表末尾</span><br><span class="line">    # 第三个参数为步长，<span class="number">-1</span> 表示逆向</span><br><span class="line">    inputWords=inputWords[<span class="number">-1</span>::<span class="number">-1</span>]</span><br><span class="line"> </span><br><span class="line">    # 重新组合字符串</span><br><span class="line">    output = <span class="string">' '</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    input = <span class="string">'I like runoob'</span></span><br><span class="line">    rw = reverseWords(input)</span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">tuple = ( 'abcd', <span class="number">786</span> , <span class="number">2.23</span>, 'runoob', <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, 'runoob')</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (tuple)             <span class="meta"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="meta"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="meta"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="meta"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="meta"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple + tinytuple) <span class="meta"># 连接元组</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt; print(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">&gt;&gt;&gt; tup[<span class="number">0</span>] = <span class="number">11</span>  # 修改元组元素的操作是非法的</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()    <span class="comment"># 空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><p>string、list 和 tuple 都属于 sequence（序列）。</p><p>注意：</p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><p>一般来说，函数的返回值一般为一个。而函数返回多个值的时候，是以元组的方式返回的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">(a,b)</span></span><span class="symbol">:</span></span><br><span class="line">...     <span class="keyword">return</span> (a,b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;type(example(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><p>python中的函数还可以接收可变长参数，比如以 “*” 开头的的参数名，会将所有的参数收集到一个元组上。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">test</span>(*<span class="keyword">args</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">args</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">args</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">test</span>(1,2,3,4)))    #可以看见其函数的返回值是一个元组</span><br></pre></td></tr></table></figure><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><p>创建格式：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;<span class="keyword">value</span><span class="number">01</span>,<span class="keyword">value</span><span class="number">02</span>,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">'Google'</span>, <span class="string">'Taobao'</span>, <span class="string">'Runoob'</span>, <span class="string">'Facebook'</span>, <span class="string">'Zhihu'</span>, <span class="string">'Baidu'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(sites)   # 输出集合，重复的元素被自动去掉</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Runoob'</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'Runoob 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'Runoob 不在集合中'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="builtin-name">set</span>(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = <span class="builtin-name">set</span>(<span class="string">'alacazam'</span>)</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(a - b)     # a 和 b 的差集</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(a | b)     # a 和 b 的并集</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(a &amp; b)     # a 和 b 的交集</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(a ^ b)     # a 和 b 中不同时存在的元素</span><br></pre></td></tr></table></figure><h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - 菜鸟教程"</span></span><br><span class="line">dict[2]     = <span class="string">"2 - 菜鸟工具"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>,<span class="string">'code'</span>:1, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span> (dict[<span class="string">'one'</span>])       # 输出键为 <span class="string">'one'</span> 的值</span><br><span class="line"><span class="builtin-name">print</span> (dict[2])           # 输出键为 2 的值</span><br><span class="line"><span class="builtin-name">print</span> (tinydict)          # 输出完整的字典</span><br><span class="line"><span class="builtin-name">print</span> (tinydict.keys())   # 输出所有键</span><br><span class="line"><span class="builtin-name">print</span> (tinydict.values()) # 输出所有值</span><br></pre></td></tr></table></figure><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dict([(<span class="string">'Runoob'</span>, <span class="number">1</span>), (<span class="string">'Google'</span>, <span class="number">2</span>), (<span class="string">'Taobao'</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt; &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line">&gt;&gt;&gt; dict(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p><p>注意：</p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 { }。</li></ul><p>python中的字典是使用了一个称为散列表（hashtable）的算法（不具体展开），<br>其特点就是：不管字典中有多少项，in操作符花费的时间都差不多。<br>如果把一个字典对象作为for的迭代对象，那么这个操作将会遍历字典的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">(d)</span>:</span></span><br><span class="line">    <span class="comment"># d 是一个字典对象</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> d:</span><br><span class="line">        print(c)</span><br><span class="line">        <span class="comment">#如果调用函数试试的话，会发现函数会将d的所有键打印出来;</span></span><br><span class="line">        <span class="comment">#也就是遍历的是d的键，而不是值.</span></span><br></pre></td></tr></table></figure><p>输入 dict 的键值对，可直接用 items() 函数：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'abc'</span>:1,<span class="string">"cde"</span>:2,<span class="string">"d"</span>:4,<span class="string">"c"</span>:567,<span class="string">"d"</span>:<span class="string">"key1"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="builtin-name">print</span>(k,<span class="string">":"</span>,v)</span><br></pre></td></tr></table></figure><h3 id="Python3-数据类型转换"><a href="#Python3-数据类型转换" class="headerlink" title="Python3 数据类型转换"></a>Python3 数据类型转换</h3><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">int(x [,base])</td><td align="left">将x转换为一个整数</td></tr><tr><td align="left">float(x)</td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">complex(real [,imag])</td><td align="left">创建一个复数</td></tr><tr><td align="left">str(x)</td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left">repr(x)</td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left">eval(str)</td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left">tuple(s)</td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left">list(s)</td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left">set(s)</td><td align="left">转换为可变集合</td></tr><tr><td align="left">dict(d)</td><td align="left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td align="left">frozenset(s)</td><td align="left">转换为不可变集合</td></tr><tr><td align="left">chr(x)</td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left">ord(x)</td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left">hex(x)</td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left">oct(x)</td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 命令行参数</title>
      <link href="/2020/07/25/Python3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
      <url>/2020/07/25/Python3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>getopt模块</p><a id="more"></a><h3 id="Python3-命令行参数"><a href="#Python3-命令行参数" class="headerlink" title="Python3 命令行参数"></a>Python3 命令行参数</h3><p>Python 提供了 getopt 模块来获取命令行参数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> test.<span class="keyword">py</span> arg1 arg2 arg3</span><br></pre></td></tr></table></figure><p>Python 中也可以所用 sys 的 sys.argv 来获取命令行参数：</p><ul><li><p>sys.argv 是命令行参数列表。</p></li><li><p>len(sys.argv) 是命令行参数个数。</p></li></ul><p>注：sys.argv[0] 表示脚本名。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/<span class="keyword">python3</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'参数个数为:'</span>, <span class="built_in">len</span>(sys.<span class="built_in">argv</span>), <span class="string">'个参数。'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'参数列表:'</span>, str(sys.<span class="built_in">argv</span>))</span><br></pre></td></tr></table></figure><h3 id="getopt-模块"><a href="#getopt-模块" class="headerlink" title="getopt 模块"></a>getopt 模块</h3><p>getopt 模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是 sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。</p><p>该模块提供了两个方法及一个异常处理来解析命令行参数。</p><h4 id="getopt-getopt-方法"><a href="#getopt-getopt-方法" class="headerlink" title="getopt.getopt 方法"></a>getopt.getopt 方法</h4><p>getopt.getopt 方法用于解析命令行参数列表，语法格式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getopt</span><span class="selector-class">.getopt</span>(<span class="selector-tag">args</span>, <span class="selector-tag">options</span><span class="selector-attr">[, long_options]</span>)</span><br></pre></td></tr></table></figure><p>方法参数说明：</p><ul><li><p>args: 要解析的命令行参数列表。</p></li><li><p>options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</p></li><li><p>long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数。</p></li><li><p>该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表，包含那些没有’-‘或’–’的参数。</p></li></ul><p>另外一个方法是 getopt.gnu_getopt，这里不多做介绍</p><h4 id="Exception-getopt-GetoptError"><a href="#Exception-getopt-GetoptError" class="headerlink" title="Exception getopt.GetoptError"></a>Exception getopt.GetoptError</h4><p>在没有找到参数列表，或选项的需要的参数为空时会触发该异常。</p><p>异常的参数是一个字符串，表示错误的原因。属性 msg 和 opt 为相关选项的错误信息。<br>实例<br>假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">usage:</span> test.py -i <span class="params">&lt;inputfile&gt;</span> -o <span class="params">&lt;outputfile&gt;</span></span><br></pre></td></tr></table></figure><p>test.py 文件代码如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">import sys, getopt</span><br><span class="line"></span><br><span class="line">def main(argv):</span><br><span class="line">   inputfile = <span class="string">''</span></span><br><span class="line">   outputfile = <span class="string">''</span></span><br><span class="line">   try:</span><br><span class="line">      opts, args = getopt.getopt(argv,<span class="string">"hi:o:"</span>,[<span class="string">"ifile="</span>,<span class="string">"ofile="</span>])</span><br><span class="line">   except getopt.GetoptError:</span><br><span class="line">      print (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">      sys.<span class="keyword">exit</span>(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">      <span class="keyword">if</span> opt == <span class="string">'-h'</span>:</span><br><span class="line">         print (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">         sys.<span class="keyword">exit</span>()</span><br><span class="line">      elif opt <span class="keyword">in</span> (<span class="string">"-i"</span>, <span class="string">"--ifile"</span>):</span><br><span class="line">         inputfile = arg</span><br><span class="line">      elif opt <span class="keyword">in</span> (<span class="string">"-o"</span>, <span class="string">"--ofile"</span>):</span><br><span class="line">         outputfile = arg</span><br><span class="line">   print (<span class="string">'输入的文件为：'</span>, inputfile)</span><br><span class="line">   print (<span class="string">'输出的文件为：'</span>, outputfile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 最基础使用</title>
      <link href="/2020/07/24/Python3%E6%9C%80%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/24/Python3%E6%9C%80%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Python3 最基础使用</p><a id="more"></a><h2 id="查看Python3-版本"><a href="#查看Python3-版本" class="headerlink" title="查看Python3 版本"></a>查看Python3 版本</h2><p><code>python -V</code></p><p><code>python3 --version</code></p><h2 id="Python3-交互式编程"><a href="#Python3-交互式编程" class="headerlink" title="Python3 交互式编程"></a>Python3 交互式编程</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python</span></span><br></pre></td></tr></table></figure><h2 id="Python3-脚本式编程"><a href="#Python3-脚本式编程" class="headerlink" title="Python3 脚本式编程"></a>Python3 脚本式编程</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> hello.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>若无法执行，需修改权限：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x hello.py</span><br></pre></td></tr></table></figure><h2 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p><p><code># -*- coding: utf-8 -*-</code></p><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>第一个字符必须是字母表中字母或下划线 _ 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。<br>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</li></ul><h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import keyword</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Python中单行注释以 # 开头，实例如下：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"># 第一个注释</span><br><span class="line">print (<span class="string">"Hello, Python!"</span>) # 第二个注释</span><br></pre></td></tr></table></figure><p>多行注释可以用多个 # 号，还有 ‘’’ 和 “””：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello, Python!"</span>)</span><br></pre></td></tr></table></figure><p>以下实例我们可以输出函数的注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''这是文档字符串'''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(a.__doc__)</span><br></pre></td></tr></table></figure><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">total</span> = <span class="string">item_one + \</span></span><br><span class="line">        <span class="attr">item_two</span> <span class="string">+ \</span></span><br><span class="line">        <span class="attr">item_three</span></span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">total</span> = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></table></figure><h3 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li>bool (布尔), 如 True。</li><li>float (浮点数), 如 1.23、3E-2</li><li>complex (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><ul><li>python中单引号和双引号使用完全相同。</li><li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li><li>转义符 ‘&#39;</li><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n”  \n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li><li>当字符串内容为浮点型要转换为整型时，无法直接用 int() 转换：需要把字符串先转化成 float 型再转换成 int 型</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">'字符串'</span></span><br><span class="line"><span class="attr">sentence</span> = <span class="string">"这是一个句子。"</span></span><br><span class="line"><span class="attr">paragraph</span> = <span class="string">"""这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">str=<span class="string">'Runoob'</span></span><br><span class="line"> </span><br><span class="line">print(str)                 <span class="comment"># 输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(str[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(str[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(str[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(str * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(str + <span class="string">'你好'</span>)        <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">'hello\nrunoob'</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r'hello\nrunoob'</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>这里的 r 指 raw，即 raw string。</p><p>三个双引号赋值给字符串变量时，表示一种字符串的特殊写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str=<span class="string">"""I</span></span><br><span class="line"><span class="string"><span class="meta">... </span>want</span></span><br><span class="line"><span class="string"><span class="meta">... </span>you"""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str</span><br><span class="line"><span class="string">'I\nwant\nyou'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str)</span><br><span class="line">I</span><br><span class="line">want</span><br><span class="line">you</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p>记住：空行也是程序代码的一部分</p><h3 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h3><p>执行下面的程序在按回车键后就会等待用户输入：执行下面的程序在按回车键后就会等待用户输入：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">input(<span class="string">"\n\n按下 enter 键后退出。"</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h3 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h3><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">import sys; x = <span class="string">'runoob'</span>; sys.<span class="keyword">stdout</span>.<span class="built_in">write</span>(x + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>使用交互式命令行执行，输出结果为：使用交互式命令行执行，输出结果为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="meta"><span class="meta-keyword">import</span> sys;</span> x = <span class="string">'runoob'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>此处的 7 表示字符数。</p><h3 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line">elif expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h3 id="Print-输出"><a href="#Print-输出" class="headerlink" title="Print 输出"></a>Print 输出</h3><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">x</span>=<span class="string">"a"</span></span><br><span class="line"><span class="attribute">y</span>=<span class="string">"b"</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="builtin-name">print</span>( x )</span><br><span class="line"><span class="builtin-name">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'---------'</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="builtin-name">print</span>( x, <span class="attribute">end</span>=<span class="string">" "</span> )</span><br><span class="line"><span class="builtin-name">print</span>( y, <span class="attribute">end</span>=<span class="string">" "</span> )</span><br><span class="line"><span class="builtin-name">print</span>()</span><br></pre></td></tr></table></figure><h3 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h3><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： import somemodule</p><p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>将某个模块中的全部函数导入，格式为： from somemodule import *</p><p>将模块换个别名，例如：import time as abc，在引用时格式为：abc.sleep(1)。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'================Python import mode=========================='</span>)</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">'命令行参数为:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="builtin-name">print</span> (i)</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">'\n python 路径为'</span>,sys.path)</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'================python from import==================================='</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'path:'</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> -h</span><br><span class="line">usage: <span class="keyword">python</span> [option] ... [-<span class="keyword">c</span> cmd | -<span class="keyword">m</span> <span class="keyword">mod</span> | <span class="keyword">file</span> | -] [arg] ...</span><br><span class="line">Options <span class="built_in">and</span> arguments (<span class="built_in">and</span> corresponding environment variables):</span><br><span class="line">-<span class="keyword">c</span> cmd : program passed in <span class="keyword">as</span> <span class="built_in">string</span> (terminates option <span class="keyword">list</span>)</span><br><span class="line">-d     : <span class="keyword">debug</span> output from parser (also PYTHONDEBUG=<span class="keyword">x</span>)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="keyword">print</span> this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure><h3 id="第一行注释"><a href="#第一行注释" class="headerlink" title="第一行注释"></a>第一行注释</h3><p>第一行注释标的是指向 python 的路径，告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器。<br>在 Windows 下可以不写第一行注释:</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br></pre></td></tr></table></figure><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python3</span></span><br></pre></td></tr></table></figure><h3 id="help-函数"><a href="#help-函数" class="headerlink" title="help() 函数"></a>help() 函数</h3><p>调用 python 的 help() 函数可以打印输出一个函数的文档字符串：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下实例，查看 max 内置函数的参数列表和规范的文档</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; help(max)</span><br><span class="line">……显示帮助信息……</span><br></pre></td></tr></table></figure><p>如果仅仅想得到文档字符串：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(max.__doc_<span class="number">_</span>)    <span class="comment"># 注意，doc的前后分别是两个下划线</span></span><br></pre></td></tr></table></figure><p>要善用 help() 方法<br>通过命令 help(“print”) 我们知道这个方法里第三个为缺省参数 sep=’ ‘。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; help(<span class="string">"print"</span>)</span><br></pre></td></tr></table></figure><h3 id="“Windows-命令行窗口”下清屏"><a href="#“Windows-命令行窗口”下清屏" class="headerlink" title="“Windows 命令行窗口”下清屏"></a>“Windows 命令行窗口”下清屏</h3><p>第一种方法，在命令行窗口输入：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import os</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=os.system(<span class="string">"cls"</span>)</span><br></pre></td></tr></table></figure><p>第二种方法，在命令行窗口输入：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import subprocess</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=subprocess.call(<span class="string">"cls"</span>, shell=True)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 下安装 Python 虚拟环境</title>
      <link href="/2020/06/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/06/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>主要介绍如何 在 Windows 下使用 virtualenv 创建 Python3 虚拟环境，存储新建虚拟环境是在自定义的环境变量目录下。 </p><a id="more"></a><h2 id="1、安装-virtualenvwrapper"><a href="#1、安装-virtualenvwrapper" class="headerlink" title="1、安装 virtualenvwrapper"></a>1、安装 virtualenvwrapper</h2><p>安装命令，windows 系统,在非 scripts 目录下运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install virtualenvwrapper-win （安装）</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">uninstall virtualenvwrapper (卸载)</span></span><br></pre></td></tr></table></figure><h2 id="2、配置虚拟环境安装路径"><a href="#2、配置虚拟环境安装路径" class="headerlink" title="2、配置虚拟环境安装路径"></a>2、配置虚拟环境安装路径</h2><p>系统变量已有默认指定环境变量，修改为你想要存储新建的虚拟环境的位置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">WORKON_HOME</span>=<span class="string">'D:\myinstall\python\pythonenv'</span></span><br></pre></td></tr></table></figure><h2 id="3、虚拟环境操作"><a href="#3、虚拟环境操作" class="headerlink" title="3、虚拟环境操作"></a>3、虚拟环境操作</h2><p>创建虚拟环境，会自动切换到创建好的虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mkvirtualenv virtualenv_name</span></span><br></pre></td></tr></table></figure><p>切换到某个虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon other_virtualenv_name</span></span><br></pre></td></tr></table></figure><p>退出当前虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><p>删除某个虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rmvirtualenv virtualenv_name</span></span><br></pre></td></tr></table></figure><p>列出所有虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsvirtualenv</span></span><br></pre></td></tr></table></figure><p>切换到虚拟环境的目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cdvirtualenv</span></span><br></pre></td></tr></table></figure><p>创建虚拟环境的时候指定python版本<br>在使用 <code>mkvirtualenv</code> 的时候，可以指定 <code>--python</code> 的参数来指定具体的 python 路径</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --<span class="keyword">python</span>==C:\python37\<span class="keyword">python</span>.<span class="keyword">exe</span> virtualenv_name</span><br></pre></td></tr></table></figure><p>列出当前虚拟环境下所有 pip 安装的依赖包</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h2 id="4、检查-wrapper-下的目录文件"><a href="#4、检查-wrapper-下的目录文件" class="headerlink" title="4、检查 wrapper 下的目录文件"></a>4、检查 wrapper 下的目录文件</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon</span></span><br></pre></td></tr></table></figure><h2 id="5、在虚拟环境下安装工具包"><a href="#5、在虚拟环境下安装工具包" class="headerlink" title="5、在虚拟环境下安装工具包"></a>5、在虚拟环境下安装工具包</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i <span class="string">https:</span><span class="comment">//pypi.douban.com/simple scrapy   (使用豆瓣源)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volantis 主题下优化博客</title>
      <link href="/2020/05/24/Volantis%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/24/Volantis%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>CDN 加速、主页文章只显示摘要</p><a id="more"></a><h2 id="一、免费-CDN-搭建"><a href="#一、免费-CDN-搭建" class="headerlink" title="一、免费 CDN 搭建"></a>一、免费 CDN 搭建</h2><p>jsDelivr + Github 是免费且好用的CDN。<br>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：</p><ul><li><a href="https://cdn.jsdelivr.net/gh/yinSpark/yinspark.github.io@master/favicon.ico" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/yinSpark/yinspark.github.io@master/favicon.ico</a></li><li><a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css</a></li><li><a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4</a></li></ul><h2 id="二、优化博客主页"><a href="#二、优化博客主页" class="headerlink" title="二、优化博客主页"></a>二、优化博客主页</h2><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>在文章中插入 <!-- more -->，前面的部分即为摘要。</p><p><code>某篇文章源码</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-21</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是摘要</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">more</span> <span class="string">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是正文</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意： <span class="comment">&lt;!-- more --&gt;</span> 前后一定要有空行，不然可能导致显示错位。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 reveal.js 制作 PPT</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reveal-js%E5%88%B6%E4%BD%9CPPT/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reveal-js%E5%88%B6%E4%BD%9CPPT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 docsify 动态生成文档网站</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docsify%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docsify%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 hexo 搭建个人博客</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍如何搭建 Hexo 个人博客写作系统，如何发布到 GitHub Pages 上，以及如何绑定自己的域名。另外就是如何使用 NexT 主题，最后关于如何进行写作。</p><a id="more"></a><h2 id="一、搭建本地写作环境"><a href="#一、搭建本地写作环境" class="headerlink" title="一、搭建本地写作环境"></a>一、搭建本地写作环境</h2><h3 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h3><p>使用 Hexo 必需先安装 Node.js 和 Git。<br>安装 Hexo，命令<br>第一步：使用 cnpm，安装淘宝镜像源<br><code>sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>第二步：安装hexo脚本架<br><code>sudo cnpm install hexo-cli -g</code></p><h3 id="1-2-创建项目"><a href="#1-2-创建项目" class="headerlink" title="1.2 创建项目"></a>1.2 创建项目</h3><p>创建并初始化博客项目，切换目录，安装依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">init myblog</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">myblog</span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><h3 id="1-3-本地预览"><a href="#1-3-本地预览" class="headerlink" title="1.3 本地预览"></a>1.3 本地预览</h3><ol><li>生成静态网站<br><code>hexo generate</code>  或简化的 <code>hexo g</code></li><li>查看目录结构<br><code>tree -L 1</code></li><li>启动服务，本地预览<br><code>hexo server</code> 或简化的 <code>hexo s</code><br>测试链接 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li></ol><h3 id="1-4-新建文章"><a href="#1-4-新建文章" class="headerlink" title="1.4 新建文章"></a>1.4 新建文章</h3><p>测试如何写一篇文章</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">new test</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure><p>测试链接 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h2 id="二、创建-GitHub-Pages"><a href="#二、创建-GitHub-Pages" class="headerlink" title="二、创建 GitHub Pages"></a>二、创建 GitHub Pages</h2><p>第一步：打开<a href="https://github.com/new/" target="_blank" rel="noopener">https://github.com/new/</a>，输入名字(你将来博客网址)，创建仓库。<br>第二步：修改_config.xml</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/yinSpark/yinspark.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>第三步：执行部署命令<br>可能需要安装一个插件，先安装再部署</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cnpm</span> <span class="string">install hexo-deployer-git --save</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>若有需要，最好先清除缓存，然后部署</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">deploy 简化为 hexo d</span></span><br></pre></td></tr></table></figure><p>打开 <a href="https://yinspark.github.io/">https://yinspark.github.io/</a>，这里是你自己GitHub Pages 名字</p><h2 id="三、绑定自己的域名"><a href="#三、绑定自己的域名" class="headerlink" title="三、绑定自己的域名"></a>三、绑定自己的域名</h2><h3 id="3-1-添加域名解析"><a href="#3-1-添加域名解析" class="headerlink" title="3.1 添加域名解析"></a>3.1 添加域名解析</h3><p>操作步骤一：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">登录阿里云</span> --&gt; <span class="title">[</span><span class="comment">控制台</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名列表</span><span class="title">]</span></span><br><span class="line">--&gt; <span class="title">[</span><span class="comment">你的域名</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名解析</span><span class="title">]</span></span><br></pre></td></tr></table></figure><p>操作步骤二：<br>添加两条解析记录<br>第一条：<code>记录值：[通过 ping xx.github.io 获得的ip]</code>，其它默认就行<br>第二条：<code>记录类型：CNAME, 主机记录： www, 记录值：[你的 GitHub Pages 地址]</code>，其它默认就行<br>为了保险起见，我加了第三条，其实和第二条一样<br>第三条：<code>记录值：[通过 ping yinspark.github.io 获得的ip]</code>，其它默认就行</p><h3 id="3-2-绑定独立域名"><a href="#3-2-绑定独立域名" class="headerlink" title="3.2 绑定独立域名"></a>3.2 绑定独立域名</h3><p>操作步骤如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">myblog/source</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">CNAME</span></span><br><span class="line"><span class="meta">写入自己的域名，我的域名</span> <span class="string">www.yinspark.xyz</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">..</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>这样就可以使用自己的域名 <a href="http:www.yinspark.xyz">http:www.yinspark.xyz</a> 访问了</p><h2 id="四、使用-NexT-主题"><a href="#四、使用-NexT-主题" class="headerlink" title="四、使用 NexT 主题"></a>四、使用 NexT 主题</h2><p>我下面介绍个 Hexo 主题的使用方法，我自己用的 Volantis。</p><h3 id="4-1-安装主题"><a href="#4-1-安装主题" class="headerlink" title="4.1 安装主题"></a>4.1 安装主题</h3><p>安装步骤</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/theme-next/hexo-theme-next.git</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">themes/hexo-theme-next</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag -l</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout tags/v7.8.0</span></span><br><span class="line"><span class="comment"># 修改_config.xml</span></span><br><span class="line"><span class="attr">theme</span>: <span class="string">hexo-theme-next</span></span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g --debug</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s --debug</span></span><br><span class="line"><span class="comment"># 部署到GitHub上</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="4-2-主题配置"><a href="#4-2-主题配置" class="headerlink" title="4.2 主题配置"></a>4.2 主题配置</h3><p>不过多介绍，参考文档使用</p><h3 id="4-3-新建页面"><a href="#4-3-新建页面" class="headerlink" title="4.3 新建页面"></a>4.3 新建页面</h3><ol><li>新增导航栏页面</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改 themes/hexo-theme-next/<span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml</span><br><span class="line">menu:</span><br><span class="line">和themes/hexo-theme-next/languages/zh-<span class="module-access"><span class="module"><span class="identifier">CN</span>.</span></span>yml</span><br></pre></td></tr></table></figure><ol start="2"><li>新建分类、标签、关于页面</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br><span class="line">hexo new<span class="built_in"> page </span>categories</span><br><span class="line">hexo new<span class="built_in"> page </span>about</span><br></pre></td></tr></table></figure><ol start="3"><li>页面设置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-05</span><span class="number">-21</span> <span class="number">02</span><span class="string">:02:23</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="comment"># type: "tags" # 指定页面类型</span></span><br><span class="line"><span class="comment"># comments: false # 禁用评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="五、开始写作"><a href="#五、开始写作" class="headerlink" title="五、开始写作"></a>五、开始写作</h2><h3 id="5-1-创建文章并熟悉布局"><a href="#5-1-创建文章并熟悉布局" class="headerlink" title="5.1 创建文章并熟悉布局"></a>5.1 创建文章并熟悉布局</h3><ol><li>新建一篇文章</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>第<span class="number">1</span>篇文章</span><br></pre></td></tr></table></figure><ol start="2"><li>想要文件名带上创建日期</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改全局配置 <span class="symbol">new_post_name:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.md</span><br><span class="line">hexo new 第<span class="number">2</span>篇文章</span><br></pre></td></tr></table></figure><ol start="3"><li>布局</li></ol><ul><li>文章</li><li>页面</li><li>草稿</li></ul><ol start="4"><li>新建一篇草稿</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft 第<span class="number">1</span>篇草稿</span><br><span class="line">hexo publish _drafts 第<span class="number">1</span>篇草稿</span><br></pre></td></tr></table></figure><h3 id="5-2-使用写作模板"><a href="#5-2-使用写作模板" class="headerlink" title="5.2 使用写作模板"></a>5.2 使用写作模板</h3><p>查看有哪些模板</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tree</span> scaffolds/ # Windows下失灵</span><br><span class="line">可使用 <span class="built_in">tree</span> /F scaffolds</span><br></pre></td></tr></table></figure><ol><li>查看默认文章模板</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> scaffolds/<span class="keyword">post</span>.md</span><br></pre></td></tr></table></figure><ol start="2"><li>修改模板post.md</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签</span> <span class="number">2</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">分类</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">分类</span> <span class="number">2</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ol start="3"><li>指定模板新建文章</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>[模板名] &lt;文章名&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 使用过程遇到的坑总结</title>
      <link href="/2020/05/22/NodeJS%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/22/NodeJS%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 常用的第三方库</title>
      <link href="/2020/05/22/NodeJS%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2020/05/22/NodeJS%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 使用过程遇到的坑总结</title>
      <link href="/2020/05/22/Python3%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/22/Python3%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 常用的第三方库</title>
      <link href="/2020/05/22/Python3%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2020/05/22/Python3%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基础语法和扩展语法GFM</title>
      <link href="/2020/05/22/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM/"/>
      <url>/2020/05/22/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 如何配置和操作使用</title>
      <link href="/2020/05/22/VSCode%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/22/VSCode%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础操作 </tag>
            
            <tag> 软件的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用快捷键和命令</title>
      <link href="/2020/05/22/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/22/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 常用快捷键和命令</title>
      <link href="/2020/05/22/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/22/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>常用快捷键、命令行操作</p><a id="more"></a><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>chcp 命令<br>chcp 65001：改变终端编码为 UTF-8</p></li><li><p>cls 命令<br>cls：清屏</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础操作 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/21/hello-world/"/>
      <url>/2020/05/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
