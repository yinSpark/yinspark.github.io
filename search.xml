<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows 下安装 Python 虚拟环境</title>
      <link href="/2020/06/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/06/24/windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>主要介绍如何 在 Windows 下使用 virtualenv 创建 Python3 虚拟环境，存储新建虚拟环境是在自定义的环境变量目录下。 </p><a id="more"></a><h2 id="1、安装-virtualenvwrapper"><a href="#1、安装-virtualenvwrapper" class="headerlink" title="1、安装 virtualenvwrapper"></a>1、安装 virtualenvwrapper</h2><p>安装命令，windows 系统,在非 scripts 目录下运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install virtualenvwrapper-win （安装）</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">uninstall virtualenvwrapper (卸载)</span></span><br></pre></td></tr></table></figure><h2 id="2、配置虚拟环境安装路径"><a href="#2、配置虚拟环境安装路径" class="headerlink" title="2、配置虚拟环境安装路径"></a>2、配置虚拟环境安装路径</h2><p>系统变量已有默认指定环境变量，修改为你想要存储新建的虚拟环境的位置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">WORKON_HOME</span>=<span class="string">'D:\myinstall\python\pythonenv'</span></span><br></pre></td></tr></table></figure><h2 id="3、虚拟环境操作"><a href="#3、虚拟环境操作" class="headerlink" title="3、虚拟环境操作"></a>3、虚拟环境操作</h2><p>创建虚拟环境，会自动切换到创建好的虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mkvirtualenv virtualenv_name</span></span><br></pre></td></tr></table></figure><p>切换到某个虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon other_virtualenv_name</span></span><br></pre></td></tr></table></figure><p>退出当前虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><p>删除某个虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rmvirtualenv virtualenv_name</span></span><br></pre></td></tr></table></figure><p>列出所有虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsvirtualenv</span></span><br></pre></td></tr></table></figure><p>切换到虚拟环境的目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cdvirtualenv</span></span><br></pre></td></tr></table></figure><p>创建虚拟环境的时候指定python版本<br>在使用 <code>mkvirtualenv</code> 的时候，可以指定 <code>--python</code> 的参数来指定具体的 python 路径</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --<span class="keyword">python</span>==C:\python37\<span class="keyword">python</span>.<span class="keyword">exe</span> virtualenv_name</span><br></pre></td></tr></table></figure><p>列出当前虚拟环境下所有 pip 安装的依赖包</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h2 id="4、检查-wrapper-下的目录文件"><a href="#4、检查-wrapper-下的目录文件" class="headerlink" title="4、检查 wrapper 下的目录文件"></a>4、检查 wrapper 下的目录文件</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon</span></span><br></pre></td></tr></table></figure><h2 id="5、在虚拟环境下安装工具包"><a href="#5、在虚拟环境下安装工具包" class="headerlink" title="5、在虚拟环境下安装工具包"></a>5、在虚拟环境下安装工具包</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i <span class="string">https:</span><span class="comment">//pypi.douban.com/simple scrapy   (使用豆瓣源)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3命令行参数</title>
      <link href="/2020/06/24/Python3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
      <url>/2020/06/24/Python3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>getopt模块</p><a id="more"></a><h3 id="Python3-命令行参数"><a href="#Python3-命令行参数" class="headerlink" title="Python3 命令行参数"></a>Python3 命令行参数</h3><p>Python 提供了 getopt 模块来获取命令行参数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> test.<span class="keyword">py</span> arg1 arg2 arg3</span><br></pre></td></tr></table></figure><p>Python 中也可以所用 sys 的 sys.argv 来获取命令行参数：</p><ul><li><p>sys.argv 是命令行参数列表。</p></li><li><p>len(sys.argv) 是命令行参数个数。</p></li></ul><p>注：sys.argv[0] 表示脚本名。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/<span class="keyword">python3</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'参数个数为:'</span>, <span class="built_in">len</span>(sys.<span class="built_in">argv</span>), <span class="string">'个参数。'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'参数列表:'</span>, str(sys.<span class="built_in">argv</span>))</span><br></pre></td></tr></table></figure><h3 id="getopt-模块"><a href="#getopt-模块" class="headerlink" title="getopt 模块"></a>getopt 模块</h3><p>getopt 模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是 sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。</p><p>该模块提供了两个方法及一个异常处理来解析命令行参数。</p><h4 id="getopt-getopt-方法"><a href="#getopt-getopt-方法" class="headerlink" title="getopt.getopt 方法"></a>getopt.getopt 方法</h4><p>getopt.getopt 方法用于解析命令行参数列表，语法格式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getopt</span><span class="selector-class">.getopt</span>(<span class="selector-tag">args</span>, <span class="selector-tag">options</span><span class="selector-attr">[, long_options]</span>)</span><br></pre></td></tr></table></figure><p>方法参数说明：</p><ul><li><p>args: 要解析的命令行参数列表。</p></li><li><p>options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</p></li><li><p>long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数。</p></li><li><p>该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表，包含那些没有’-‘或’–’的参数。</p></li></ul><p>另外一个方法是 getopt.gnu_getopt，这里不多做介绍</p><h4 id="Exception-getopt-GetoptError"><a href="#Exception-getopt-GetoptError" class="headerlink" title="Exception getopt.GetoptError"></a>Exception getopt.GetoptError</h4><p>在没有找到参数列表，或选项的需要的参数为空时会触发该异常。</p><p>异常的参数是一个字符串，表示错误的原因。属性 msg 和 opt 为相关选项的错误信息。<br>实例<br>假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">usage:</span> test.py -i <span class="params">&lt;inputfile&gt;</span> -o <span class="params">&lt;outputfile&gt;</span></span><br></pre></td></tr></table></figure><p>test.py 文件代码如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">import sys, getopt</span><br><span class="line"></span><br><span class="line">def main(argv):</span><br><span class="line">   inputfile = <span class="string">''</span></span><br><span class="line">   outputfile = <span class="string">''</span></span><br><span class="line">   try:</span><br><span class="line">      opts, args = getopt.getopt(argv,<span class="string">"hi:o:"</span>,[<span class="string">"ifile="</span>,<span class="string">"ofile="</span>])</span><br><span class="line">   except getopt.GetoptError:</span><br><span class="line">      print (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">      sys.<span class="keyword">exit</span>(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">      <span class="keyword">if</span> opt == <span class="string">'-h'</span>:</span><br><span class="line">         print (<span class="string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class="line">         sys.<span class="keyword">exit</span>()</span><br><span class="line">      elif opt <span class="keyword">in</span> (<span class="string">"-i"</span>, <span class="string">"--ifile"</span>):</span><br><span class="line">         inputfile = arg</span><br><span class="line">      elif opt <span class="keyword">in</span> (<span class="string">"-o"</span>, <span class="string">"--ofile"</span>):</span><br><span class="line">         outputfile = arg</span><br><span class="line">   print (<span class="string">'输入的文件为：'</span>, inputfile)</span><br><span class="line">   print (<span class="string">'输出的文件为：'</span>, outputfile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3最基础使用</title>
      <link href="/2020/06/24/Python3%E6%9C%80%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/24/Python3%E6%9C%80%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Python3 最基础使用</p><a id="more"></a><h2 id="查看Python3-版本"><a href="#查看Python3-版本" class="headerlink" title="查看Python3 版本"></a>查看Python3 版本</h2><p><code>python -V</code></p><h2 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p><p><code># -*- coding: utf-8 -*-</code></p><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>第一个字符必须是字母表中字母或下划线 _ 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。<br>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</li></ul><h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import keyword</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Python中单行注释以 # 开头，实例如下：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"># 第一个注释</span><br><span class="line">print (<span class="string">"Hello, Python!"</span>) # 第二个注释</span><br></pre></td></tr></table></figure><p>多行注释可以用多个 # 号，还有 ‘’’ 和 “””：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello, Python!"</span>)</span><br></pre></td></tr></table></figure><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">total</span> = <span class="string">item_one + \</span></span><br><span class="line">        <span class="attr">item_two</span> <span class="string">+ \</span></span><br><span class="line">        <span class="attr">item_three</span></span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">total</span> = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></table></figure><h3 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li>bool (布尔), 如 True。</li><li>float (浮点数), 如 1.23、3E-2</li><li>complex (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><ul><li>python中单引号和双引号使用完全相同。</li><li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li><li>转义符 ‘&#39;</li><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n”  \n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">'字符串'</span></span><br><span class="line"><span class="attr">sentence</span> = <span class="string">"这是一个句子。"</span></span><br><span class="line"><span class="attr">paragraph</span> = <span class="string">"""这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">str=<span class="string">'Runoob'</span></span><br><span class="line"> </span><br><span class="line">print(str)                 <span class="comment"># 输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(str[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(str[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(str[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(str * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(str + <span class="string">'你好'</span>)        <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">'hello\nrunoob'</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r'hello\nrunoob'</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>这里的 r 指 raw，即 raw string。</p><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p>记住：空行也是程序代码的一部分</p><h3 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h3><p>执行下面的程序在按回车键后就会等待用户输入：执行下面的程序在按回车键后就会等待用户输入：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">input(<span class="string">"\n\n按下 enter 键后退出。"</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h3 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h3><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">import sys; x = <span class="string">'runoob'</span>; sys.<span class="keyword">stdout</span>.<span class="built_in">write</span>(x + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>使用交互式命令行执行，输出结果为：使用交互式命令行执行，输出结果为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="meta"><span class="meta-keyword">import</span> sys;</span> x = <span class="string">'runoob'</span>; sys.stdout.write(x + <span class="string">'\n'</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>此处的 7 表示字符数。</p><h3 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line">elif expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h3 id="Print-输出"><a href="#Print-输出" class="headerlink" title="Print 输出"></a>Print 输出</h3><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">x</span>=<span class="string">"a"</span></span><br><span class="line"><span class="attribute">y</span>=<span class="string">"b"</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="builtin-name">print</span>( x )</span><br><span class="line"><span class="builtin-name">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'---------'</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="builtin-name">print</span>( x, <span class="attribute">end</span>=<span class="string">" "</span> )</span><br><span class="line"><span class="builtin-name">print</span>( y, <span class="attribute">end</span>=<span class="string">" "</span> )</span><br><span class="line"><span class="builtin-name">print</span>()</span><br></pre></td></tr></table></figure><h3 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h3><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： import somemodule</p><p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>将某个模块中的全部函数导入，格式为： from somemodule import *</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'================Python import mode=========================='</span>)</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">'命令行参数为:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="builtin-name">print</span> (i)</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">'\n python 路径为'</span>,sys.path)</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'================python from import==================================='</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'path:'</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> -h</span><br><span class="line">usage: <span class="keyword">python</span> [option] ... [-<span class="keyword">c</span> cmd | -<span class="keyword">m</span> <span class="keyword">mod</span> | <span class="keyword">file</span> | -] [arg] ...</span><br><span class="line">Options <span class="built_in">and</span> arguments (<span class="built_in">and</span> corresponding environment variables):</span><br><span class="line">-<span class="keyword">c</span> cmd : program passed in <span class="keyword">as</span> <span class="built_in">string</span> (terminates option <span class="keyword">list</span>)</span><br><span class="line">-d     : <span class="keyword">debug</span> output from parser (also PYTHONDEBUG=<span class="keyword">x</span>)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="keyword">print</span> this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volantis 主题下优化博客</title>
      <link href="/2020/05/24/Volantis%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/24/Volantis%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>CDN 加速、主页文章只显示摘要</p><a id="more"></a><h2 id="一、免费-CDN-搭建"><a href="#一、免费-CDN-搭建" class="headerlink" title="一、免费 CDN 搭建"></a>一、免费 CDN 搭建</h2><p>jsDelivr + Github 是免费且好用的CDN。<br>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：</p><ul><li><a href="https://cdn.jsdelivr.net/gh/yinSpark/yinspark.github.io@master/favicon.ico" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/yinSpark/yinspark.github.io@master/favicon.ico</a></li><li><a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css</a></li><li><a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4</a></li></ul><h2 id="二、优化博客主页"><a href="#二、优化博客主页" class="headerlink" title="二、优化博客主页"></a>二、优化博客主页</h2><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>在文章中插入 <!-- more -->，前面的部分即为摘要。</p><p><code>某篇文章源码</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-21</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是摘要</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">more</span> <span class="string">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是正文</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意： <span class="comment">&lt;!-- more --&gt;</span> 前后一定要有空行，不然可能导致显示错位。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 reveal.js 制作 PPT</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reveal-js%E5%88%B6%E4%BD%9CPPT/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8reveal-js%E5%88%B6%E4%BD%9CPPT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 docsify 动态生成文档网站</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docsify%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8docsify%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 hexo 搭建个人博客</title>
      <link href="/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/22/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍如何搭建 Hexo 个人博客写作系统，如何发布到 GitHub Pages 上，以及如何绑定自己的域名。另外就是如何使用 NexT 主题，最后关于如何进行写作。</p><a id="more"></a><h2 id="一、搭建本地写作环境"><a href="#一、搭建本地写作环境" class="headerlink" title="一、搭建本地写作环境"></a>一、搭建本地写作环境</h2><h3 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h3><p>使用 Hexo 必需先安装 Node.js 和 Git。<br>安装 Hexo，命令<br>第一步：使用 cnpm，安装淘宝镜像源<br><code>sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>第二步：安装hexo脚本架<br><code>sudo cnpm install hexo-cli -g</code></p><h3 id="1-2-创建项目"><a href="#1-2-创建项目" class="headerlink" title="1.2 创建项目"></a>1.2 创建项目</h3><p>创建并初始化博客项目，切换目录，安装依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">init myblog</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">myblog</span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><h3 id="1-3-本地预览"><a href="#1-3-本地预览" class="headerlink" title="1.3 本地预览"></a>1.3 本地预览</h3><ol><li>生成静态网站<br><code>hexo generate</code>  或简化的 <code>hexo g</code></li><li>查看目录结构<br><code>tree -L 1</code></li><li>启动服务，本地预览<br><code>hexo server</code> 或简化的 <code>hexo s</code><br>测试链接 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li></ol><h3 id="1-4-新建文章"><a href="#1-4-新建文章" class="headerlink" title="1.4 新建文章"></a>1.4 新建文章</h3><p>测试如何写一篇文章</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">new test</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure><p>测试链接 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h2 id="二、创建-GitHub-Pages"><a href="#二、创建-GitHub-Pages" class="headerlink" title="二、创建 GitHub Pages"></a>二、创建 GitHub Pages</h2><p>第一步：打开<a href="https://github.com/new/" target="_blank" rel="noopener">https://github.com/new/</a>，输入名字(你将来博客网址)，创建仓库。<br>第二步：修改_config.xml</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/yinSpark/yinspark.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>第三步：执行部署命令<br>可能需要安装一个插件，先安装再部署</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cnpm</span> <span class="string">install hexo-deployer-git --save</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>若有需要，最好先清除缓存，然后部署</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">deploy 简化为 hexo d</span></span><br></pre></td></tr></table></figure><p>打开 <a href="https://yinspark.github.io/">https://yinspark.github.io/</a>，这里是你自己GitHub Pages 名字</p><h2 id="三、绑定自己的域名"><a href="#三、绑定自己的域名" class="headerlink" title="三、绑定自己的域名"></a>三、绑定自己的域名</h2><h3 id="3-1-添加域名解析"><a href="#3-1-添加域名解析" class="headerlink" title="3.1 添加域名解析"></a>3.1 添加域名解析</h3><p>操作步骤一：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">登录阿里云</span> --&gt; <span class="title">[</span><span class="comment">控制台</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名列表</span><span class="title">]</span></span><br><span class="line">--&gt; <span class="title">[</span><span class="comment">你的域名</span><span class="title">]</span> --&gt; <span class="title">[</span><span class="comment">域名解析</span><span class="title">]</span></span><br></pre></td></tr></table></figure><p>操作步骤二：<br>添加两条解析记录<br>第一条：<code>记录值：[通过 ping xx.github.io 获得的ip]</code>，其它默认就行<br>第二条：<code>记录类型：CNAME, 主机记录： www, 记录值：[你的 GitHub Pages 地址]</code>，其它默认就行<br>为了保险起见，我加了第三条，其实和第二条一样<br>第三条：<code>记录值：[通过 ping yinspark.github.io 获得的ip]</code>，其它默认就行</p><h3 id="3-2-绑定独立域名"><a href="#3-2-绑定独立域名" class="headerlink" title="3.2 绑定独立域名"></a>3.2 绑定独立域名</h3><p>操作步骤如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">myblog/source</span></span><br><span class="line"><span class="attr">touch</span> <span class="string">CNAME</span></span><br><span class="line"><span class="meta">写入自己的域名，我的域名</span> <span class="string">www.yinspark.xyz</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">..</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>这样就可以使用自己的域名 <a href="http:www.yinspark.xyz">http:www.yinspark.xyz</a> 访问了</p><h2 id="四、使用-NexT-主题"><a href="#四、使用-NexT-主题" class="headerlink" title="四、使用 NexT 主题"></a>四、使用 NexT 主题</h2><p>我下面介绍个 Hexo 主题的使用方法，我自己用的 Volantis。</p><h3 id="4-1-安装主题"><a href="#4-1-安装主题" class="headerlink" title="4.1 安装主题"></a>4.1 安装主题</h3><p>安装步骤</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">clone https://github.com/theme-next/hexo-theme-next.git</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">themes/hexo-theme-next</span></span><br><span class="line"><span class="attr">git</span> <span class="string">tag -l</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout tags/v7.8.0</span></span><br><span class="line"><span class="comment"># 修改_config.xml</span></span><br><span class="line"><span class="attr">theme</span>: <span class="string">hexo-theme-next</span></span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g --debug</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s --debug</span></span><br><span class="line"><span class="comment"># 部署到GitHub上</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="4-2-主题配置"><a href="#4-2-主题配置" class="headerlink" title="4.2 主题配置"></a>4.2 主题配置</h3><p>不过多介绍，参考文档使用</p><h3 id="4-3-新建页面"><a href="#4-3-新建页面" class="headerlink" title="4.3 新建页面"></a>4.3 新建页面</h3><ol><li>新增导航栏页面</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改 themes/hexo-theme-next/<span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml</span><br><span class="line">menu:</span><br><span class="line">和themes/hexo-theme-next/languages/zh-<span class="module-access"><span class="module"><span class="identifier">CN</span>.</span></span>yml</span><br></pre></td></tr></table></figure><ol start="2"><li>新建分类、标签、关于页面</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br><span class="line">hexo new<span class="built_in"> page </span>categories</span><br><span class="line">hexo new<span class="built_in"> page </span>about</span><br></pre></td></tr></table></figure><ol start="3"><li>页面设置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-05</span><span class="number">-21</span> <span class="number">02</span><span class="string">:02:23</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="comment"># type: "tags" # 指定页面类型</span></span><br><span class="line"><span class="comment"># comments: false # 禁用评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="五、开始写作"><a href="#五、开始写作" class="headerlink" title="五、开始写作"></a>五、开始写作</h2><h3 id="5-1-创建文章并熟悉布局"><a href="#5-1-创建文章并熟悉布局" class="headerlink" title="5.1 创建文章并熟悉布局"></a>5.1 创建文章并熟悉布局</h3><ol><li>新建一篇文章</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>第<span class="number">1</span>篇文章</span><br></pre></td></tr></table></figure><ol start="2"><li>想要文件名带上创建日期</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改全局配置 <span class="symbol">new_post_name:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.md</span><br><span class="line">hexo new 第<span class="number">2</span>篇文章</span><br></pre></td></tr></table></figure><ol start="3"><li>布局</li></ol><ul><li>文章</li><li>页面</li><li>草稿</li></ul><ol start="4"><li>新建一篇草稿</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft 第<span class="number">1</span>篇草稿</span><br><span class="line">hexo publish _drafts 第<span class="number">1</span>篇草稿</span><br></pre></td></tr></table></figure><h3 id="5-2-使用写作模板"><a href="#5-2-使用写作模板" class="headerlink" title="5.2 使用写作模板"></a>5.2 使用写作模板</h3><p>查看有哪些模板</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tree</span> scaffolds/ # Windows下失灵</span><br><span class="line">可使用 <span class="built_in">tree</span> /F scaffolds</span><br></pre></td></tr></table></figure><ol><li>查看默认文章模板</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> scaffolds/<span class="keyword">post</span>.md</span><br></pre></td></tr></table></figure><ol start="2"><li>修改模板post.md</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签</span> <span class="number">2</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">分类</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">分类</span> <span class="number">2</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ol start="3"><li>指定模板新建文章</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>[模板名] &lt;文章名&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 集成开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 使用过程遇到的坑总结</title>
      <link href="/2020/05/22/NodeJS%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/22/NodeJS%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 常用的第三方库</title>
      <link href="/2020/05/22/NodeJS%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2020/05/22/NodeJS%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 使用过程遇到的坑总结</title>
      <link href="/2020/05/22/Python3%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/22/Python3%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 常用的第三方库</title>
      <link href="/2020/05/22/Python3%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2020/05/22/Python3%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基础语法和扩展语法GFM</title>
      <link href="/2020/05/22/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM/"/>
      <url>/2020/05/22/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 如何配置和操作使用</title>
      <link href="/2020/05/22/VSCode%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/22/VSCode%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础操作 </tag>
            
            <tag> 软件的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用快捷键和命令</title>
      <link href="/2020/05/22/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/22/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 常用快捷键和命令</title>
      <link href="/2020/05/22/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/22/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>常用快捷键、命令行操作</p><a id="more"></a><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>chcp 命令<br>chcp 65001：改变终端编码为 UTF-8</p></li><li><p>cls 命令<br>cls：清屏</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础操作 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/21/hello-world/"/>
      <url>/2020/05/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
